// <auto-generated />
using System;
using BPMeasurmentApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BPMeasurmentApp.Migrations
{
    [DbContext(typeof(BPMeasurementDbContext))]
    [Migration("20241006043412_Position")]
    partial class Position
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BPMeasurmentApp.Models.BPMeasurementModel", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ID"));

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateTaken")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int?>("Diastolic")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("PositionID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("Systolic")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("BPMeasurementSet");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Category = "",
                            DateTaken = new DateTime(2024, 10, 6, 0, 34, 12, 59, DateTimeKind.Local).AddTicks(9712),
                            Diastolic = 70,
                            PositionID = 1,
                            Systolic = 110
                        },
                        new
                        {
                            ID = 2,
                            Category = "",
                            DateTaken = new DateTime(2024, 10, 6, 0, 34, 12, 59, DateTimeKind.Local).AddTicks(9766),
                            Diastolic = 12,
                            PositionID = 2,
                            Systolic = 180
                        },
                        new
                        {
                            ID = 3,
                            Category = "",
                            DateTaken = new DateTime(2024, 10, 6, 0, 34, 12, 59, DateTimeKind.Local).AddTicks(9768),
                            Diastolic = 90,
                            PositionID = 3,
                            Systolic = 140
                        },
                        new
                        {
                            ID = 4,
                            Category = "",
                            DateTaken = new DateTime(2024, 10, 6, 0, 34, 12, 59, DateTimeKind.Local).AddTicks(9809),
                            Diastolic = 85,
                            PositionID = 1,
                            Systolic = 130
                        },
                        new
                        {
                            ID = 5,
                            Category = "",
                            DateTaken = new DateTime(2024, 10, 6, 0, 34, 12, 59, DateTimeKind.Local).AddTicks(9813),
                            Diastolic = 65,
                            PositionID = 2,
                            Systolic = 121
                        });
                });

            modelBuilder.Entity("BPMeasurmentApp.Models.Position", b =>
                {
                    b.Property<int?>("PositionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("PositionID"));

                    b.Property<string>("PositionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PositionID");

                    b.ToTable("Position");

                    b.HasData(
                        new
                        {
                            PositionID = 1,
                            PositionName = "Sitting"
                        },
                        new
                        {
                            PositionID = 2,
                            PositionName = "Standing"
                        },
                        new
                        {
                            PositionID = 3,
                            PositionName = "Lying Down"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
