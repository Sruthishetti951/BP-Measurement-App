// <auto-generated />
using System;
using BPMeasurmentApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BPMeasurmentApp.Migrations
{
    [DbContext(typeof(BPMeasurementDbContext))]
    [Migration("20241004171540_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BPMeasurmentApp.Models.BPMeasurement", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ID"));

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateTaken")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int?>("Diastolic")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Systolic")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("BPMeasurementSet");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Category = "",
                            DateTaken = new DateTime(2024, 10, 4, 13, 15, 40, 17, DateTimeKind.Local).AddTicks(7709),
                            Diastolic = 70,
                            Position = "",
                            Systolic = 110
                        },
                        new
                        {
                            ID = 2,
                            Category = "",
                            DateTaken = new DateTime(2024, 10, 4, 13, 15, 40, 17, DateTimeKind.Local).AddTicks(7757),
                            Diastolic = 12,
                            Position = "",
                            Systolic = 180
                        },
                        new
                        {
                            ID = 3,
                            Category = "",
                            DateTaken = new DateTime(2024, 10, 4, 13, 15, 40, 17, DateTimeKind.Local).AddTicks(7759),
                            Diastolic = 90,
                            Position = "",
                            Systolic = 140
                        },
                        new
                        {
                            ID = 4,
                            Category = "",
                            DateTaken = new DateTime(2024, 10, 4, 13, 15, 40, 17, DateTimeKind.Local).AddTicks(7762),
                            Diastolic = 85,
                            Position = "",
                            Systolic = 130
                        },
                        new
                        {
                            ID = 5,
                            Category = "",
                            DateTaken = new DateTime(2024, 10, 4, 13, 15, 40, 17, DateTimeKind.Local).AddTicks(7764),
                            Diastolic = 65,
                            Position = "",
                            Systolic = 121
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
